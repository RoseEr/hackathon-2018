#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('hackathon');
var http = require('http');
const WebSocket = require('ws');

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
const wss = new WebSocket.Server({ server });

let allPsychics = [];
let ghost = {};
let totalPeople = [];
let totalPlaces = [];
let totalThings = [];
let possiblePeople = [];
let possiblePlaces = [];
let possibleThings = [];

for(var x = 1; x <= 18; x++) {
  totalPeople.push(x);
  totalPlaces.push(x);
  totalThings.push(x);
}

while(possiblePeople.length < 6) {
  var randomIndex = Math.floor(Math.random() * totalPeople.length);

  if (possiblePeople.indexOf(totalPeople[randomIndex]) < 0) {
    possiblePeople.push(totalPeople[randomIndex]);
    totalPeople.splice((randomIndex - 1), 1);
  }
}

while(possiblePlaces.length < 6) {
  var randomIndex = Math.floor(Math.random() * totalPlaces.length);

  if (possiblePlaces.indexOf(totalPlaces[randomIndex]) < 0) {
    possiblePlaces.push(totalPlaces[randomIndex]);
    totalPlaces.splice((randomIndex - 1), 1);
  }
}

while(possibleThings.length < 6) {
  var randomIndex = Math.floor(Math.random() * totalThings.length);

  if (possibleThings.indexOf(totalThings[randomIndex]) < 0) {
    possibleThings.push(totalThings[randomIndex]);
    totalThings.splice((randomIndex - 1), 1);
  }
}


wss.on('connection', function connection(ws) {
  console.log('connection made');

  ws.on('message', function incoming(message) {
    const messageObject = JSON.parse(message);

    if (messageObject.type === 'send-cards') {
      console.log('Send Card Message Cards to: ', allPsychics);
      allPsychics.forEach(psychic => {
        if(psychic.psychic.id === messageObject.player) {
          console.log('sending cards to ', messageObject.player);
          allPsychics[messageObject.player]["ws"].send(JSON.stringify(messageObject));  
        }
      });

      // if (allPsychics[messageObject.player]) {
      //   console.log('sending cards to ', messageObject.player);
      //   allPsychics[messageObject.player]["ws"].send(JSON.stringify(messageObject));
      // }
    }
    
    if (messageObject.type === 'psychic-guess') {
      console.log('psychic: ' + messageObject.playerId + ' guessed: ' + messageObject.guess)
      var response = {
        'type': 'guess-response'
      };
      var psychicToRespondTo;

      console.log('checking all psychics: ', allPsychics);
      allPsychics.forEach(psychic => {
        if(psychic.psychic.id === messageObject.playerId) {
          psychicToRespondTo = psychic.ws;
          // check person first if it hasn't been guessed yet
          if (!psychic.psychic.person.isGuessed) {
            // Are we correct?
            psychic.psychic.person.isGuessed = messageObject.guess === psychic.psychic.person.id;
            response['isCorrect'] = messageObject.guess === psychic.psychic.person.id;
            response['category'] = 'person';
            response['guess'] = messageObject.guess;

          // next, we then check places
          } else if (!psychic.psychic.place.isGuessed) {
            psychic.psychic.place.isGuessed = messageObject.guess === psychic.psychic.place.id;
            response['isCorrect'] = messageObject.guess === psychic.psychic.place.id;
            response['category'] = 'place';
            response['guess'] = messageObject.guess;

          
          // last, we then check things
          } else if (!psychic.psychic.thing.isGuessed) {
            psychic.psychic.thing.isGuessed = messageObject.guess === psychic.psychic.thing.id;
            response['isCorrect'] = messageObject.guess === psychic.psychic.thing.id;
            response['category'] = 'thing';
            response['guess'] = messageObject.guess;

          }
        }
      });

      if (psychicToRespondTo) {
        console.log('sending respnose: ', response);
        psychicToRespondTo.send(JSON.stringify(response));
      }
    } 

    if (messageObject.type === 'player-selection') {
      console.log('player-select: ', messageObject);
      
      // Ghost connection
      if (messageObject.selection === 'ghost') {
        ghost = ws;
        // If players already connected, send to ghost
        if (allPsychics.length !== 0) {
          var returnPsychics = [];

          allPsychics.forEach(p => {
            returnPsychics.push(p.psychic);
          });

          var ghostMessage = {
            'type': 'ghost-creation',
            'psychics': returnPsychics
          }
          ghost.send(JSON.stringify(ghostMessage));
        }
      // Psychic connection
      } else if (messageObject.selection === 'psychic') {
        var playerId = allPsychics.length + 1;
        var randomPerson = Math.floor(Math.random() * 5);
        var randomPlace = Math.floor(Math.random() * 5);
        var randomThing = Math.floor(Math.random() * 5);

        var psychic = {
          'ws': ws,
          'psychic': {
            'id': playerId,
            'person': {
              'id': possiblePeople[randomPerson],
              'isGuessed': false
            },
            'place': {
              'id': possiblePlaces[randomPlace],
              'isGuessed': false
            },
            'thing': { 
              'id': possibleThings[randomThing],
              'isGuessed': false
            }
          }
        };

        // Persist the psychic
        allPsychics.push(psychic);

        // If we have a ghost, send them the player
        if (ghost.send) {
          var ghostMessage = {
            'type': 'new-player',
            'psychic': psychic.psychic
          }
          ghost.send(JSON.stringify(ghostMessage));
        }

        // Send a response to the psychic
        var response = {
          'type': 'player-creation',
          'id': playerId,
          'people': possiblePeople,
          'places': possiblePlaces,
          'things': possibleThings,
        };
        ws.send(JSON.stringify(response));
      }
    }
  });
 
  var welcomeMessage = {
    "type": "welcome"
  }
  ws.send(JSON.stringify(welcomeMessage));
});

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}